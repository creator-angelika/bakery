/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/bakery2.gltf 
*/

import React, { useRef } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import * as THREE from "three";

export function Bakery(props) {
  const { nodes, materials } = useGLTF('models/bakery2.gltf')

  const wall = useTexture("textures/wall.jpg");
  wall.flipY=false;
  wall.encoding = THREE.sRGBEncoding;
  const wallMaterial = new THREE.MeshStandardMaterial({
    map: wall,
  })

  const wood1 = useTexture("textures/wood1.jpg");
  wood1.flipY=false;
  wood1.encoding = THREE.sRGBEncoding;
  const wood1Material = new THREE.MeshStandardMaterial({
    map: wood1,
  })

  const glass1 = useTexture("textures/glass1.jpg");
  glass1.flipY=false;
  glass1.encoding = THREE.sRGBEncoding;
  const glass1Material = new THREE.MeshStandardMaterial({
    map: glass1,
  })

  const glass2 = useTexture("textures/glass2.jpg");
  glass2.flipY=false;
  glass2.encoding = THREE.sRGBEncoding;
  const glass2Material = new THREE.MeshStandardMaterial({
    map: glass2,
  })

  const glass3 = useTexture("textures/glass3.jpg");
  glass3.flipY=false;
  glass3.encoding = THREE.sRGBEncoding;
  const glass3Material = new THREE.MeshStandardMaterial({
    map: glass3,
  })

  const glass4 = useTexture("textures/glass4.jpg");
  glass4.flipY=false;
  glass4.encoding = THREE.sRGBEncoding;
  const glass4Material = new THREE.MeshStandardMaterial({
    map: glass4,
  })

  const bluedonut = useTexture("textures/donutblue.jpg");
  bluedonut.flipY=false;
  bluedonut.encoding = THREE.sRGBEncoding;
  const bluedonutMaterial = new THREE.MeshStandardMaterial({
    map: bluedonut,
  })

  const bluedonut2 = useTexture("textures/donutblue2.jpg");
  bluedonut2.flipY=false;
  bluedonut2.encoding = THREE.sRGBEncoding;
  const bluedonut2Material = new THREE.MeshStandardMaterial({
    map: bluedonut2,
  })

  const pumpkincake1 = useTexture("textures/pumpkincake1.jpg");
  pumpkincake1.flipY=false;
  pumpkincake1.encoding = THREE.sRGBEncoding;
  const pumpkincake1Material = new THREE.MeshStandardMaterial({
    map: pumpkincake1,
  })

  const rosecake = useTexture("textures/rosecake.jpg");
  rosecake.flipY=false;
  rosecake.encoding = THREE.sRGBEncoding;
  const rosecakeMaterial = new THREE.MeshStandardMaterial({
    map: rosecake,
  })

  const rosecake2 = useTexture("textures/rosecake2.jpg");
  rosecake2.flipY=false;
  rosecake2.encoding = THREE.sRGBEncoding;
  const rosecake2Material = new THREE.MeshStandardMaterial({
    map: rosecake2,
  })

  const redvelvetcake = useTexture("textures/redvelvetcake.jpg");
  redvelvetcake.flipY=false;
  redvelvetcake.encoding = THREE.sRGBEncoding;
  const redvelvetcakeMaterial = new THREE.MeshStandardMaterial({
    map: redvelvetcake,
  })

  const kitkatcake = useTexture("textures/kitkat.jpg");
  kitkatcake.flipY=false;
  kitkatcake.encoding = THREE.sRGBEncoding;
  const kitkatcakeMaterial = new THREE.MeshStandardMaterial({
    map: kitkatcake,
  })

  const kitkatcake1 = useTexture("textures/kitkat1.jpg");
  kitkatcake1.flipY=false;
  kitkatcake1.encoding = THREE.sRGBEncoding;
  const kitkatcake1Material = new THREE.MeshStandardMaterial({
    map: kitkatcake1,
  })

  const pinkdonut = useTexture("textures/pinkdonut.jpg");
  pinkdonut.flipY=false;
  pinkdonut.encoding = THREE.sRGBEncoding;
  const pinkdonutMaterial = new THREE.MeshStandardMaterial({
    map: pinkdonut,
  })

  const blueberry = useTexture("textures/blueberry.jpg");
  blueberry.flipY=false;
  blueberry.encoding = THREE.sRGBEncoding;
  const blueberryMaterial = new THREE.MeshStandardMaterial({
    map: blueberry,
  })

  const cupcake = useTexture("textures/cupcake.jpg");
  cupcake.flipY=false;
  cupcake.encoding = THREE.sRGBEncoding;
  const cupcakeMaterial = new THREE.MeshStandardMaterial({
    map: cupcake,
  })

  const cupcake1 = useTexture("textures/cupcake1.jpg");
  cupcake1.flipY=false;
  cupcake1.encoding = THREE.sRGBEncoding;
  const cupcake1Material = new THREE.MeshStandardMaterial({
    map: cupcake1,
  })

  const swissroll3 = useTexture("textures/swissroll3.jpg");
  swissroll3.flipY=false;
  swissroll3.encoding = THREE.sRGBEncoding;
  const swissroll3Material = new THREE.MeshStandardMaterial({
    map: swissroll3,
  })

  const whitedonut = useTexture("textures/whitedonut.jpg");
  whitedonut.flipY=false;
  whitedonut.encoding = THREE.sRGBEncoding;
  const whitedonutMaterial = new THREE.MeshStandardMaterial({
    map: whitedonut,
  })

  const tiramisuchoc = useTexture("textures/tiramisuchoc.jpg");
  tiramisuchoc.flipY=false;
  tiramisuchoc.encoding = THREE.sRGBEncoding;
  const tiramisuchocMaterial = new THREE.MeshStandardMaterial({
    map: tiramisuchoc,
  })

  const tiramisuchoc1 = useTexture("textures/tiramisuchoc1.jpg");
  tiramisuchoc1.flipY=false;
  tiramisuchoc1.encoding = THREE.sRGBEncoding;
  const tiramisuchoc1Material = new THREE.MeshStandardMaterial({
    map: tiramisuchoc1,
  })

  const swissroll2 = useTexture("textures/swissroll2.jpg");
  swissroll2.flipY=false;
  swissroll2.encoding = THREE.sRGBEncoding;
  const swissroll2Material = new THREE.MeshStandardMaterial({
    map: swissroll2,
  })

  const tiramisured = useTexture("textures/tiramisured.jpg");
  tiramisured.flipY=false;
  tiramisured.encoding = THREE.sRGBEncoding;
  const tiramisuredMaterial = new THREE.MeshStandardMaterial({
    map: tiramisured,
  })

  const tiramisured1 = useTexture("textures/tiramisured1.jpg");
  tiramisured1.flipY=false;
  tiramisured1.encoding = THREE.sRGBEncoding;
  const tiramisured1Material = new THREE.MeshStandardMaterial({
    map: tiramisured1,
  })

  const swissroll1 = useTexture("textures/swissroll1.jpg");
  swissroll1.flipY=false;
  swissroll1.encoding = THREE.sRGBEncoding;
  const swissroll1Material = new THREE.MeshStandardMaterial({
    map: swissroll1,
  })

  const croissant = useTexture("textures/croissant.jpg");
  croissant.flipY=false;
  croissant.encoding = THREE.sRGBEncoding;
  const croissantMaterial = new THREE.MeshStandardMaterial({
    map: croissant,
  })

  const chocdonut = useTexture("textures/chocdonut.jpg");
  chocdonut.flipY=false;
  chocdonut.encoding = THREE.sRGBEncoding;
  const chocdonutMaterial = new THREE.MeshStandardMaterial({
    map: chocdonut,
  })

  const shelfinner = useTexture("textures/shelfinner.jpg");
  shelfinner.flipY=false;
  shelfinner.encoding = THREE.sRGBEncoding;
  const shelfinnerMaterial = new THREE.MeshStandardMaterial({
    map: shelfinner,
  })

  const room = useTexture("textures/room.jpg");
  room.flipY=false;
  room.encoding = THREE.sRGBEncoding;
  const roomMaterial = new THREE.MeshStandardMaterial({
    map: room,
  })

  const window = useTexture("textures/window.jpg");
  window.flipY=false;
  window.encoding = THREE.sRGBEncoding;
  const windowMaterial = new THREE.MeshStandardMaterial({
    map: window,
  })

  const curtain = useTexture("textures/curtain.jpg");
  curtain.flipY=false;
  curtain.encoding = THREE.sRGBEncoding;
  const curtainMaterial = new THREE.MeshStandardMaterial({
    map: curtain,
  })

  const plate = useTexture("textures/p.jpg");
  plate.flipY=false;
  plate.encoding = THREE.sRGBEncoding;
  const plateMaterial = new THREE.MeshStandardMaterial({
    map: plate,
  })

  const plate2 = useTexture("textures/plate2.jpg");
  plate2.flipY=false;
  plate2.encoding = THREE.sRGBEncoding;
  const plate2Material = new THREE.MeshStandardMaterial({
    map: plate2,
  })

  const plate3 = useTexture("textures/plate3.jpg");
  plate3.flipY=false;
  plate3.encoding = THREE.sRGBEncoding;
  const plate3Material = new THREE.MeshStandardMaterial({
    map: plate3,
  })

  const supportwood = useTexture("textures/supportwood.jpg");
  supportwood.flipY=false;
  supportwood.encoding = THREE.sRGBEncoding;
  const supportwoodMaterial = new THREE.MeshStandardMaterial({
    map: supportwood,
  })

  const standwood = useTexture("textures/standwood.jpg");
  standwood.flipY=false;
  standwood.encoding = THREE.sRGBEncoding;
  const standwoodMaterial = new THREE.MeshStandardMaterial({
    map: standwood,
  })

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.window.geometry} material={windowMaterial} position={[-3.223, 5.199, 7.068]} rotation={[-Math.PI / 2, Math.PI / 2, 0]} />
      <mesh geometry={nodes.swiss1.geometry} material={swissroll1Material} position={[0.293, 4.143, -1.032]} rotation={[0, 0, -Math.PI / 2]} />
      <mesh geometry={nodes.pumpkincake1.geometry} material={pumpkincake1Material} position={[0.748, 2.144, 0.537]} rotation={[0, 1.571, 0]} />
      <mesh geometry={nodes.plane.geometry} material={roomMaterial} position={[0.47, -0.004, 0]} />
      <mesh geometry={nodes.tiramisured1.geometry} material={tiramisuredMaterial} position={[0.363, 4.189, -1.867]} />
      <mesh geometry={nodes.rosecake2.geometry} material={rosecake2Material} position={[-0.409, 2.119, -0.977]} rotation={[0.55, -0.858, 0.19]} scale={1.063} />
      <mesh geometry={nodes.rosecake1.geometry} material={rosecakeMaterial} position={[0.71, 2.242, -0.805]} rotation={[1.154, -1.247, 0.679]} scale={1.063} />
      <mesh geometry={nodes.croissant2.geometry} material={croissantMaterial} position={[-0.628, 4.056, -0.056]} rotation={[-Math.PI / 2, -Math.PI / 6, 0]} />
      <mesh geometry={nodes.croissant1.geometry} material={croissantMaterial} position={[0.174, 4.056, -0.056]} rotation={[-Math.PI / 2, -Math.PI / 6, 0]} />
      <mesh geometry={nodes.bluedonut1.geometry} material={bluedonutMaterial} position={[0.45, 1.943, 1.609]} rotation={[0, 1.284, 0]} />
      <mesh geometry={nodes.pinkdonut1.geometry} material={pinkdonutMaterial} position={[0.529, 2.68, 0.037]} rotation={[0, 1.284, 0]} />
      <mesh geometry={nodes.redvelvet1.geometry} material={redvelvetcakeMaterial} position={[0.602, 2.122, -2.252]} scale={1.141} />
      <mesh geometry={nodes.bluecheesecake2.geometry} material={blueberryMaterial} position={[0.633, 2.786, -1.184]} />
      <mesh geometry={nodes.stand.geometry} material={standwoodMaterial} position={[-0.092, 1.261, -0.351]} />
      <mesh geometry={nodes.support.geometry} material={supportwoodMaterial} position={[0, 1.759, -0.371]} />
      <mesh geometry={nodes.shelf.geometry} material={wood1Material} position={[0, 3.867, -0.371]} />
      <mesh geometry={nodes.glassbottom.geometry} material={glass4Material} position={[0, 1.904, -0.371]} />
      <mesh geometry={nodes.glass2.geometry} material={glass3Material} position={[0, 2.638, -0.371]} />
      <mesh geometry={nodes.glass1.geometry} material={glass2Material} position={[0, 3.33, -0.371]} />
      <mesh geometry={nodes.glasstop.geometry} material={glass1Material} position={[0, 3.955, -0.371]} />
      <mesh geometry={nodes.shelfinner.geometry} material={shelfinnerMaterial} position={[0, 3.867, -0.371]} />
      <mesh geometry={nodes.tiramisured2.geometry} material={tiramisured1Material} position={[-0.423, 4.415, -1.754]} rotation={[0, -0.547, -1.302]} />
      <mesh geometry={nodes.plate1.geometry} material={plateMaterial} position={[-6.027, 5.74, 2.723]} rotation={[0, 0, -Math.PI / 2]} scale={0.016} />
      <mesh geometry={nodes.plate3.geometry} material={plate3Material} position={[-6.085, 6.668, -0.499]} rotation={[-Math.PI, 0, -Math.PI / 2]} />
      <mesh geometry={nodes.plate2.geometry} material={plate2Material} position={[-6.051, 6.251, 1.099]} rotation={[0, 0, -Math.PI / 2]} />
      <mesh geometry={nodes.chocodonut1.geometry} material={chocdonutMaterial} position={[0.257, 3.996, 1.024]} />
      <mesh geometry={nodes.whitedonut1.geometry} material={whitedonutMaterial} position={[0.538, 3.383, -1.034]} />
      <mesh geometry={nodes.swiss3.geometry} material={swissroll2Material} position={[0.643, 3.528, 1.156]} rotation={[0, 0, -Math.PI / 2]} scale={0.805} />
      <mesh geometry={nodes.swiss4.geometry} material={swissroll2Material} position={[-0.407, 3.528, 1.156]} rotation={[0, 0, -Math.PI / 2]} scale={0.805} />
      <mesh geometry={nodes.swiss5.geometry} material={swissroll3Material} position={[0.498, 2.834, -2.126]} rotation={[0, 0, -Math.PI / 2]} scale={0.786} />
      <mesh geometry={nodes.tiramisuchoc1.geometry} material={tiramisuchocMaterial} position={[0.441, 3.364, 0.121]} />
      <mesh geometry={nodes.cupcake1.geometry} material={cupcake1Material} position={[0.446, 3.597, -2.075]} rotation={[-Math.PI, 1.068, -Math.PI]} />
      <mesh geometry={nodes.redvelvet2.geometry} material={redvelvetcakeMaterial} position={[-0.871, 2.122, -2.252]} scale={1.141} />
      <mesh geometry={nodes.bluecheesecake1.geometry} material={blueberryMaterial} position={[-0.434, 2.786, -1.184]} />
      <mesh geometry={nodes.pumpkincake2.geometry} material={pumpkincake1Material} position={[-0.176, 2.144, 0.537]} rotation={[0, 1.571, 0]} />
      <mesh geometry={nodes.curtain.geometry} material={curtainMaterial} position={[-2.043, 4.521, 6.534]} rotation={[-Math.PI / 2, 0, 0]} />
      <mesh geometry={nodes.swiss5001.geometry} material={swissroll3Material} position={[-0.54, 2.834, -2.126]} rotation={[0, 0, -Math.PI / 2]} scale={0.786} />
      <mesh geometry={nodes.bluedonut1001.geometry} material={bluedonut2Material} position={[-0.573, 1.943, 1.609]} rotation={[0, 1.284, 0]} />
      <mesh geometry={nodes.kitkatcake2.geometry} material={kitkatcakeMaterial} position={[-0.611, 2.773, 1.186]} />
      <mesh geometry={nodes.pinkdonut1001.geometry} material={pinkdonutMaterial} position={[-0.696, 2.68, 0.037]} rotation={[0, 1.284, 0]} />
      <mesh geometry={nodes.cupcake2.geometry} material={cupcakeMaterial} position={[-0.537, 3.597, -2.075]} rotation={[0, -1.068, 0]} />z
      <mesh geometry={nodes.whitedonut1001.geometry} material={whitedonutMaterial} position={[-0.479, 3.383, -1.034]} />
      <mesh geometry={nodes.tiramisuchoc1001.geometry} material={tiramisuchoc1Material} position={[-0.318, 3.364, 0.121]} />
      <mesh geometry={nodes.swiss1001.geometry} material={swissroll1Material} position={[-0.613, 4.143, -1.032]} rotation={[0, 0, -Math.PI / 2]} />
      <mesh geometry={nodes.chocodonut1001.geometry} material={chocdonutMaterial} position={[-0.674, 3.996, 1.024]} />
      <mesh geometry={nodes.kitkatcake1.geometry} material={kitkatcake1Material} position={[0.446, 2.773, 1.186]} />
      <mesh geometry={nodes.wall.geometry} material={wallMaterial} position={[0.499, -0.004, 0]} />
    </group>
  )
}

useGLTF.preload('models/bakery2.gltf')
